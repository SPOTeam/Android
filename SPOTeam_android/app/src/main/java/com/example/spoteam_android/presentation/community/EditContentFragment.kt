package com.example.spoteam_android.presentation.community

import android.app.Activity
import android.content.Intent
import android.graphics.PorterDuff
import android.net.Uri
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.spoteam_android.R
import com.example.spoteam_android.RetrofitInstance
import com.example.spoteam_android.databinding.FragmentMystudyWriteContentBinding
import com.example.spoteam_android.presentation.study.WriteContentImageRVadapter
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.asRequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.io.File
import java.io.FileOutputStream
import java.util.UUID

class EditContentFragment : BottomSheetDialogFragment(), AdapterView.OnItemSelectedListener {

    lateinit var binding: FragmentMystudyWriteContentBinding
    private var selectedCategory: String = ""
    private var isAnonymous: Boolean = false
    private var postId : Int = -1

    private val imageList = mutableListOf<Any>()
    private lateinit var getImageLauncher: ActivityResultLauncher<Intent>
    private lateinit var imageAdapter: WriteContentImageRVadapter


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentMystudyWriteContentBinding.inflate(inflater, container, false)

        isCancelable = false // Ïô∏Î∂Ä ÌÅ¥Î¶≠ÏúºÎ°ú Îã´ÌûàÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï

        // Ï†ÑÎã¨Îêú Îç∞Ïù¥ÌÑ∞ Î∞õÏïÑÏôÄÏÑú UIÏóê Î∞òÏòÅ
        arguments?.let {
            val postId = it.getInt("postId")
//            Log.d("EditContentFragment", postId)

            this.postId = postId
        }



        binding.writeContentTitleTv.text = "Í∏ÄÏàòÏ†ï"

        binding.mystudyCategorySpinner.onItemSelectedListener = this

        binding.addImageIv.setOnClickListener{
            getImageFromAlbum()
        }

        binding.writeContentFinishBtn.setOnClickListener {
            submitContent()
        }

        // Spinner Ïñ¥ÎåëÌÑ∞ ÏÑ§Ï†ï
        ArrayAdapter.createFromResource(
            requireContext(),
            R.array.category_list,
            R.layout.write_spinner_item
        ).also { adapter ->
            adapter.setDropDownViewResource(R.layout.write_spinner_dropdown_item)
            binding.mystudyCategorySpinner.adapter = adapter
        }

        binding.writeContentPrevIv.setOnClickListener{
            dismiss()
        }

        getImageLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val data = result.data

                // üîÅ Ïù¥Ï†Ñ Ïù¥ÎØ∏ÏßÄ Î™®Îëê Ï†úÍ±∞
                imageList.clear()
                if (data?.data != null) {
                    // ‚úÖ Ìïú Ïû• ÏÑ†ÌÉùÎêú Í≤ΩÏö∞
                    val uri = data.data!!
                    imageList.add(uri)
                }

                imageAdapter.notifyDataSetChanged() // RecyclerView Í∞±Ïã†
            }
        }

        getPostContent()
        initTextWatchers()

        return binding.root
    }

    private fun initTextWatchers() {
        val textWatcher = object : TextWatcher {
            override fun afterTextChanged(s: Editable?) {
                checkFieldsForEmptyValues()
            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
        }

        binding.writeContentTitleEt.addTextChangedListener(textWatcher)
        binding.writeContentContentEt.addTextChangedListener(textWatcher)
    }

    private fun checkFieldsForEmptyValues() {
        val title = binding.writeContentTitleEt.text.toString().trim()
        val content = binding.writeContentContentEt.text.toString().trim()

        binding.writeContentFinishBtn.isEnabled = title.isNotEmpty() && content.isNotEmpty()

    }

    private fun getPostContent() {
        val service = RetrofitInstance.retrofit.create(CommunityAPIService::class.java)
        service.getContentInfo(postId, false)
            .enqueue(object : Callback<ContentResponse> {
                override fun onResponse(
                    call: Call<ContentResponse>,
                    response: Response<ContentResponse>
                ) {
                    if (response.isSuccessful) {
                        val contentResponse = response.body()
                        if (contentResponse?.isSuccess == true) {
                            val contentInfo = contentResponse.result
                            isAnonymous = contentInfo.anonymous
                            selectedCategory = contentInfo.type
                            initContentInfo(contentInfo)
                        } else {
                            showError(contentResponse?.message)
                        }
                    } else {
                        showError(response.code().toString())
                    }
                }

                override fun onFailure(call: Call<ContentResponse>, t: Throwable) {
                    Log.e("CommunityContentActivity", "Failure: ${t.message}", t)
                }
            })
    }

    private fun showError(message: String?) {
        Toast.makeText(requireContext(), "Error: $message", Toast.LENGTH_SHORT).show()
    }

    private fun changeContent() {
        binding.isAnnountTv.text = "ÏùµÎ™Ö"

        binding.checkIc.setOnClickListener{
            if(isAnonymous) {
                binding.checkIc.setColorFilter(
                    ContextCompat.getColor(requireContext(), R.color.gray),
                    PorterDuff.Mode.SRC_IN
                )
                isAnonymous = false

            } else {
                binding.checkIc.setColorFilter(
                    ContextCompat.getColor(requireContext(), R.color.b500),
                    PorterDuff.Mode.SRC_IN
                )
                isAnonymous = true
            }
        }
    }
    private fun getImageFromAlbum() {
        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {
            type = "image/*"
//            putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true) // üî• Ïó¨Îü¨ Í∞ú ÏÑ†ÌÉù Í∞ÄÎä•ÌïòÎèÑÎ°ù ÏÑ§Ï†ï
        }
        getImageLauncher.launch(intent)
    }

    private fun initContentInfo(contentInfo: ContentInfo) {
        binding.writeContentTitleEt.setText(contentInfo.title)
        binding.writeContentContentEt.setText(contentInfo.content)

        // ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò® Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏Î•º Uri Î¶¨Ïä§Ìä∏Î°ú Î≥ÄÌôò
        val serverImageUrls = contentInfo.imageUrl

        imageAdapter = WriteContentImageRVadapter(imageList)

        // ÏÑúÎ≤Ñ Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏ÏôÄ Í∏∞Ï°¥Ïùò Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÑ†ÌÉùÌïú Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏ ÌÜµÌï©
        imageList.clear()

        if(contentInfo.imageUrl != null ) imageList.add(serverImageUrls)

        binding.addedImagesRv.apply {
            adapter = imageAdapter
            layoutManager =
                LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
        }
        imageAdapter.notifyDataSetChanged() // RecyclerView Í∞±Ïã†

        if (isAnonymous) {
            binding.checkIc.setColorFilter(
                ContextCompat.getColor(requireContext(), R.color.b500),
                PorterDuff.Mode.SRC_IN
            )
        } else {
            binding.checkIc.setColorFilter(
                ContextCompat.getColor(requireContext(), R.color.gray),
                PorterDuff.Mode.SRC_IN
            )
        }

        changeContent()

        val displayName = getCategoryDisplayName(selectedCategory)
        val position = resources.getStringArray(R.array.category_list).indexOf(displayName)
        if (position != -1) {
            binding.mystudyCategorySpinner.setSelection(position)
        }
    }

    // ÏÑúÎ≤ÑÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Ïπ¥ÌÖåÍ≥†Î¶¨ Í∞íÏùÑ ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥¥Ïó¨Ï§Ñ ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
    private fun getCategoryDisplayName(category: String): String {
        return when (category) {
            "PASS_EXPERIENCE" -> "Ìï©Í≤©ÌõÑÍ∏∞"
            "INFORMATION_SHARING" -> "Ï†ïÎ≥¥Í≥µÏú†"
            "COUNSELING" -> "Í≥†ÎØºÏÉÅÎã¥"
            "JOB_TALK" -> "Ï∑®Ï§ÄÌÜ†ÌÅ¨"
            "FREE_TALK" -> "ÏûêÏú†ÌÜ†ÌÅ¨"
            else -> "Ìï©Í≤©ÌõÑÍ∏∞"
        }
    }

    private fun getFileFromUri(uri: Uri): File {
        val inputStream = requireContext().contentResolver.openInputStream(uri)
        val fileName = "image_${UUID.randomUUID()}.png" // üî• ÌååÏùºÎ™ÖÏùÑ Í≥†Ïú†ÌïòÍ≤å ÏÉùÏÑ±
        val file = File(requireContext().cacheDir, fileName)
        val outputStream = FileOutputStream(file)

        inputStream?.use { input ->
            outputStream.use { output ->
                input.copyTo(output)
            }
        }

        return file
    }

    private fun submitContent() {
        val title = binding.writeContentTitleEt.text.toString().trim()
        val content = binding.writeContentContentEt.text.toString().trim()

        lifecycleScope.launch {
            var imagePart: MultipartBody.Part? = null
            var existingImage: RequestBody? = null

            if (imageList.isNotEmpty()) {
                val item = imageList[0]

                when (item) {
                    is Uri -> {
                        val file = getFileFromUri(item)
                        val requestFile = file.asRequestBody("image/*".toMediaTypeOrNull())
                        imagePart = MultipartBody.Part.createFormData("image", file.name, requestFile)
                        existingImage = "".toRequestBody("text/plain".toMediaTypeOrNull()) // ÏÉà Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìúÎãàÍπå Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ Ï†úÍ±∞
                    }
                    is String -> {
                        // ÏÑúÎ≤Ñ Ïù¥ÎØ∏ÏßÄ URL (Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ Ïú†ÏßÄ)
                        imagePart = null
                        existingImage = item.toRequestBody("text/plain".toMediaTypeOrNull())
                    }
                }
            }

            val isAnonymousPart = isAnonymous.toString().toRequestBody("text/plain".toMediaTypeOrNull())
            val themePart = selectedCategory.toRequestBody("text/plain".toMediaTypeOrNull())
            val titlePart = title.toRequestBody("text/plain".toMediaTypeOrNull())
            val contentPart = content.toRequestBody("text/plain".toMediaTypeOrNull())

            sendContentToServer(isAnonymousPart, themePart, titlePart, contentPart, imagePart, existingImage)
        }
    }

    private fun sendContentToServer(
        isAnonymous: RequestBody,
        themePart: RequestBody,
        titlePart: RequestBody,
        contentPart: RequestBody,
        imagePart: MultipartBody.Part?,
        existingImage : RequestBody?
    ) {
        val service = RetrofitInstance.retrofit.create(CommunityAPIService::class.java)
        service.editContent(postId, titlePart, contentPart, themePart, imagePart, existingImage, isAnonymous)
            .enqueue(object : Callback<WriteContentResponse> {
                override fun onResponse(call: Call<WriteContentResponse>, response: Response<WriteContentResponse>) {
                    if (response.isSuccessful && response.body()?.isSuccess == true) {
                        val writeContentResponseBody = response.body()!!.result
                        Log.d("isExitEdit", "1234567890")
                        dismiss()
                    } else {
                        Toast.makeText(requireContext(), "Í≤åÏãúÍ∏Ä Ìé∏ÏßëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                    }
                }
                override fun onFailure(call: Call<WriteContentResponse>, t: Throwable) {
                    Toast.makeText(requireContext(), "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                    Log.e("sendContentToServer", "onFailure: ${t.localizedMessage}", t)
                }
            })
    }

    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
        // SpinnerÏóêÏÑú ÏÑ†ÌÉùÎêú Ìï≠Î™©Ïùò ÌÖçÏä§Ìä∏Î•º Í∞ÄÏ†∏Ïò¥
        val selectedItem = parent?.getItemAtPosition(position).toString()

        // ÏÑ†ÌÉùÎêú Ìï≠Î™©Ïóê Îî∞Îùº Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Ï†ï
        selectedCategory = when (selectedItem) {
            "Ìï©Í≤©ÌõÑÍ∏∞" -> "PASS_EXPERIENCE"
            "Ï†ïÎ≥¥Í≥µÏú†" -> "INFORMATION_SHARING"
            "Í≥†ÎØºÏÉÅÎã¥" -> "COUNSELING"
            "Ï∑®Ï§ÄÌÜ†ÌÅ¨" -> "JOB_TALK"
            "ÏûêÏú†ÌÜ†ÌÅ¨" -> "FREE_TALK"
            else -> "PASS_EXPERIENCE" // Í∏∞Î≥∏Í∞í
        }
    }

    override fun onNothingSelected(parent: AdapterView<*>?) {
        selectedCategory = "PASS_EXPERIENCE"
    }

    override fun onDestroyView() {
        super.onDestroyView()
        (activity as? CommunityContentActivity)?.fetchContentInfo() // Fragment Îã´ÌûàÎ©¥ ÏÉàÎ°úÍ≥†Ïπ®
    }
}
