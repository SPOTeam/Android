package com.example.spoteam_android.ui.community

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.graphics.PorterDuff
import android.net.Uri
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import androidx.core.os.bundleOf
import androidx.fragment.app.setFragmentResult
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.spoteam_android.R
import com.example.spoteam_android.RetrofitInstance
import com.example.spoteam_android.databinding.FragmentMystudyWriteContentBinding
import com.example.spoteam_android.ui.study.WriteContentImageRVadapter
import retrofit2.Callback
import retrofit2.Response
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.asRequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import retrofit2.Call
import java.io.File
import java.io.FileOutputStream
import java.util.UUID
import kotlin.reflect.typeOf

class WriteContentFragment() : BottomSheetDialogFragment(), AdapterView.OnItemSelectedListener {

    lateinit var binding: FragmentMystudyWriteContentBinding
    private var selectedCategory: String = ""
    private var isAnonymous: Boolean = false
    private val imageList = mutableListOf<Any>()
    private lateinit var imageAdapter: WriteContentImageRVadapter
    private lateinit var getImageLauncher: ActivityResultLauncher<Intent>


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentMystudyWriteContentBinding.inflate(inflater, container, false)

        isCancelable = false // Ïô∏Î∂Ä ÌÅ¥Î¶≠ÏúºÎ°ú Îã´ÌûàÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï

        changeContent()
        initTextWatchers()
        initImageButtonAction()

        binding.mystudyCategorySpinner.onItemSelectedListener = this

        binding.writeContentFinishBtn.setOnClickListener{
            submitContent()
        }

        ArrayAdapter.createFromResource(
            requireContext(),
            R.array.category_list,
            android.R.layout.simple_spinner_item
        ).also { adapter ->
            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
            binding.mystudyCategorySpinner.adapter = adapter
        }

        binding.addImageIv.setOnClickListener{
            getImageFromAlbum()
//            Log.d("imageFormat", "$profileImageURI")
        }

        binding.writeContentPrevIv.setOnClickListener{
            dismiss()
        }

        return binding.root
    }

    private fun getImageFromAlbum() {
        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {
            type = "image/*"
        }
        getImageLauncher.launch(intent)
    }

    private fun initTextWatchers() {
        val textWatcher = object : TextWatcher {
            override fun afterTextChanged(s: Editable?) {
                checkFieldsForEmptyValues()
            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
        }

        binding.writeContentTitleEt.addTextChangedListener(textWatcher)
        binding.writeContentContentEt.addTextChangedListener(textWatcher)
    }

    private fun checkFieldsForEmptyValues() {
        val title = binding.writeContentTitleEt.text.toString().trim()
        val content = binding.writeContentContentEt.text.toString().trim()

        binding.writeContentFinishBtn.isEnabled = title.isNotEmpty() && content.isNotEmpty()

    }

    private fun submitContent() {
        val title = binding.writeContentTitleEt.text.toString().trim()
        val content = binding.writeContentContentEt.text.toString().trim()

        val imagePart: MultipartBody.Part? =
            if (imageList.isNotEmpty() && imageList[0] is Uri) {
                val file = getFileFromUri(imageList[0] as Uri)
                val requestFile = file.asRequestBody("image/*".toMediaTypeOrNull())
                MultipartBody.Part.createFormData("image", file.name, requestFile)
        } else null

        // ÎÇòÎ®∏ÏßÄ Îç∞Ïù¥ÌÑ∞Î•º RequestBodyÎ°ú Î≥ÄÌôò
        val isAnnoymous = isAnonymous.toString().toRequestBody("text/plain".toMediaTypeOrNull())
        val themePart = selectedCategory.toRequestBody("text/plain".toMediaTypeOrNull())
        val titlePart = title.toRequestBody("text/plain".toMediaTypeOrNull())
        val contentPart = content.toRequestBody("text/plain".toMediaTypeOrNull())

        // ÏÑúÎ≤ÑÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
        sendContentToServer(isAnnoymous, themePart, titlePart, contentPart, imagePart)
    }


    private fun getFileFromUri(uri: Uri): File {
        val inputStream = requireContext().contentResolver.openInputStream(uri)
        val fileName = "image_${UUID.randomUUID()}.png" // üî• ÌååÏùºÎ™ÖÏùÑ Í≥†Ïú†ÌïòÍ≤å ÏÉùÏÑ±
        val file = File(requireContext().cacheDir, fileName)
        val outputStream = FileOutputStream(file)

        inputStream?.use { input ->
            outputStream.use { output ->
                input.copyTo(output)
            }
        }

        return file
    }

    private fun initImageButtonAction() {
        // RecyclerView Ï¥àÍ∏∞Ìôî
        imageAdapter = WriteContentImageRVadapter(imageList)
        binding.addedImagesRv.apply {
            adapter = imageAdapter
            layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
        }

        // Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉùÏùÑ ÏúÑÌïú Launcher ÏÑ§Ï†ï
        getImageLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val data = result.data

                imageList.clear()

                if (data?.data != null) {
                    // üî• Îã®Ïùº Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù
                    val uri = data.data!!
                    if (!imageList.contains(uri)) {
                        imageList.add(uri)
                    }
                }

                imageAdapter.notifyDataSetChanged()
            }
        }
    }

    private fun changeContent() {
        binding.isAnnountTv.text = "ÏùµÎ™Ö"

        binding.checkIc.setOnClickListener{
            if(isAnonymous) {
                binding.checkIc.setColorFilter(
                    ContextCompat.getColor(requireContext(), R.color.gray),
                    PorterDuff.Mode.SRC_IN
                )
                isAnonymous = false

            } else {
                binding.checkIc.setColorFilter(
                    ContextCompat.getColor(requireContext(), R.color.selector_blue),
                    PorterDuff.Mode.SRC_IN
                )
                isAnonymous = true
            }
        }
    }

    private fun sendContentToServer(
        isAnonymous: RequestBody,
        themePart: RequestBody,
        titlePart: RequestBody,
        contentPart: RequestBody,
        imageParts: MultipartBody.Part?
    ) {
        val service = RetrofitInstance.retrofit.create(CommunityAPIService::class.java)
        service.postContent(titlePart, contentPart, themePart, isAnonymous, imageParts)
            .enqueue(object : Callback<WriteContentResponse> {
                override fun onResponse(call: Call<WriteContentResponse>, response: Response<WriteContentResponse>) {
                    if (response.isSuccessful && response.body()?.isSuccess == "true") {
                        val writeContentResponseBody = response.body()!!.result
                        Log.d("WriteContent", "created postId = ${writeContentResponseBody.id}")

                        val intent = Intent(requireContext(), CommunityContentActivity::class.java)
                        intent.putExtra("postInfo", writeContentResponseBody.id) // postId Îì± ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
                        startActivity(intent)
                        dismiss()
                    } else {
                        Toast.makeText(requireContext(), "Í≤åÏãúÍ∏Ä Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                    }
                }
                override fun onFailure(call: Call<WriteContentResponse>, t: Throwable) {
                    Toast.makeText(requireContext(), "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
        })
    }

    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
        // SpinnerÏóêÏÑú ÏÑ†ÌÉùÎêú Ìï≠Î™©Ïùò ÌÖçÏä§Ìä∏Î•º Í∞ÄÏ†∏Ïò¥
        val selectedItem = parent?.getItemAtPosition(position).toString()

        // ÏÑ†ÌÉùÎêú Ìï≠Î™©Ïóê Îî∞Îùº Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Ï†ï
        selectedCategory = when (selectedItem) {
            "Ìï©Í≤©ÌõÑÍ∏∞" -> "PASS_EXPERIENCE"
            "Ï†ïÎ≥¥Í≥µÏú†" -> "INFORMATION_SHARING"
            "Í≥†ÎØºÏÉÅÎã¥" -> "COUNSELING"
            "Ï∑®Ï§ÄÌÜ†ÌÅ¨" -> "JOB_TALK"
            "ÏûêÏú†ÌÜ†ÌÅ¨" -> "FREE_TALK" // Í∏∞Î≥∏Í∞í
            else -> "PASS_EXPERIENCE"
        }
    }

    override fun onNothingSelected(parent: AdapterView<*>?) {
        selectedCategory = "PASS_EXPERIENCE"
    }
}
