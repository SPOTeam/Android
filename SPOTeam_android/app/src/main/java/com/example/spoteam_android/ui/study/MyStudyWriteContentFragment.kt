package com.example.spoteam_android.ui.study

import StudyViewModel
import android.app.Activity
import android.content.Intent
import android.graphics.PorterDuff
import android.net.Uri
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import androidx.databinding.adapters.AutoCompleteTextViewBindingAdapter
import androidx.fragment.app.activityViewModels
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.spoteam_android.R
import com.example.spoteam_android.RetrofitInstance
import com.example.spoteam_android.databinding.FragmentMystudyWriteContentBinding
import com.example.spoteam_android.ui.community.CommunityAPIService
import com.example.spoteam_android.ui.community.StudyPostResponse
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.asRequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.io.File
import java.io.FileOutputStream
import java.util.UUID

class MyStudyWriteContentFragment : BottomSheetDialogFragment(), AdapterView.OnItemSelectedListener {

    lateinit var binding: FragmentMystudyWriteContentBinding
    private val studyViewModel: StudyViewModel by activityViewModels()
    private var currentStudyId : Int = -1
    private var selectedTheme: String = ""
    private var isAnnouncement: Boolean = false
    private lateinit var getImageLauncher: ActivityResultLauncher<Intent>
    private val imageList = mutableListOf<Any>()
    private lateinit var imageAdapter: WriteContentImageRVadapter

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentMystudyWriteContentBinding.inflate(inflater, container, false)

        isCancelable = false // Ïô∏Î∂Ä ÌÅ¥Î¶≠ÏúºÎ°ú Îã´ÌûàÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï

        initTextWatchers()

        // ViewModelÏóêÏÑú studyIdÎ•º Í¥ÄÏ∞∞ÌïòÍ≥† Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ fetchStudyMembers Ìò∏Ï∂ú
        studyViewModel.studyId.observe(viewLifecycleOwner) { studyId ->
            Log.d("DetailStudyHomeFragment", "Received studyId from ViewModel: $studyId")
            if (studyId != null) {
                currentStudyId = studyId
            } else {
                Toast.makeText(requireContext(), "Study ID is missing", Toast.LENGTH_SHORT).show()
            }
        }

        binding.mystudyCategorySpinner.onItemSelectedListener = this

        binding.writeContentFinishBtn.setOnClickListener{
            submitContent(currentStudyId)
        }

        ArrayAdapter.createFromResource(
            requireContext(),
            R.array.thema_list,
            android.R.layout.simple_spinner_item
        ).also { adapter ->
            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
            binding.mystudyCategorySpinner.adapter = adapter
        }

        binding.checkIc.setOnClickListener{
            if(isAnnouncement) {
                binding.checkIc.setColorFilter(
                    ContextCompat.getColor(requireContext(), R.color.gray),
                    PorterDuff.Mode.SRC_IN
                )
                isAnnouncement = false
//                Log.d("MyStudyWriteContentFragment", isAnnouncement.toString())

                binding.themeTv.visibility = View.VISIBLE
                binding.mystudyCategorySpinner.visibility = View.VISIBLE

            } else {
                binding.checkIc.setColorFilter(
                    ContextCompat.getColor(requireContext(), R.color.selector_blue),
                    PorterDuff.Mode.SRC_IN
                )
                isAnnouncement = true
//                Log.d("MyStudyWriteContentFragment", isAnnouncement.toString())

                binding.themeTv.visibility = View.GONE
                binding.mystudyCategorySpinner.visibility = View.GONE
            }
        }

        initImageButtonAction()

        binding.addImageIv.setOnClickListener{
            getImageFromAlbum()
//            Log.d("imageFormat", "$profileImageURI")
        }

        binding.writeContentPrevIv.setOnClickListener{
            dismiss()
        }

        return binding.root
    }

    private fun initTextWatchers() {
        val textWatcher = object : TextWatcher {
            override fun afterTextChanged(s: Editable?) {
                checkFieldsForEmptyValues()
            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
        }

        binding.writeContentTitleEt.addTextChangedListener(textWatcher)
        binding.writeContentContentEt.addTextChangedListener(textWatcher)
    }

    private fun checkFieldsForEmptyValues() {
        val title = binding.writeContentTitleEt.text.toString().trim()
        val content = binding.writeContentContentEt.text.toString().trim()

        binding.writeContentFinishBtn.isEnabled = title.isNotEmpty() && content.isNotEmpty()

    }


    private fun initImageButtonAction() {
        // RecyclerView Ï¥àÍ∏∞Ìôî
        imageAdapter = WriteContentImageRVadapter(imageList)
        binding.addedImagesRv.apply {
            adapter = imageAdapter
            layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
        }

        // Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉùÏùÑ ÏúÑÌïú Launcher ÏÑ§Ï†ï
        getImageLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val data = result.data

                imageList.clear()

                if (data?.data != null) {
                    // üî• Îã®Ïùº Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù
                    val uri = data.data!!
                    if (!imageList.contains(uri)) {
                        imageList.add(uri)
                    }
                }

                imageAdapter.notifyDataSetChanged()
            }
        }
    }


    // Í∞§Îü¨Î¶¨ Ïó¥Í∏∞ (Ïó¨Îü¨ Í∞ú ÏÑ†ÌÉù Í∞ÄÎä•)
    private fun getImageFromAlbum() {
        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {
            type = "image/*"
        }
        getImageLauncher.launch(intent)
    }


    private fun submitContent(studyId: Int) {
        val title = binding.writeContentTitleEt.text.toString().trim()
        val content = binding.writeContentContentEt.text.toString().trim()

        // Ïó¨Îü¨ Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ Îã¥ÏùÑ Î¶¨Ïä§Ìä∏ ÏÉùÏÑ±
        val imageParts = mutableListOf<MultipartBody.Part>()

        if (imageList.isNotEmpty()) {
            imageList.forEach { item ->
                when (item) {
                    is Uri -> { // ‚úÖ Í∞§Îü¨Î¶¨ÏóêÏÑú Ï∂îÍ∞ÄÌïú Ïù¥ÎØ∏ÏßÄ
                        val file = getFileFromUri(item)
                        if (file != null) {
                            val requestFile = file.asRequestBody("image/*".toMediaTypeOrNull())
                            val imagePart =
                                MultipartBody.Part.createFormData("images", file.name, requestFile)
                            imageParts.add(imagePart)
                        }
                    }
                }
            }
        }


        // ÎÇòÎ®∏ÏßÄ Îç∞Ïù¥ÌÑ∞Î•º RequestBodyÎ°ú Î≥ÄÌôò
        val isAnnouncementPart = isAnnouncement.toString().toRequestBody("text/plain".toMediaTypeOrNull())
        val themePart = selectedTheme.toRequestBody("text/plain".toMediaTypeOrNull())
        val titlePart = title.toRequestBody("text/plain".toMediaTypeOrNull())
        val contentPart = content.toRequestBody("text/plain".toMediaTypeOrNull())

        // ÏÑúÎ≤ÑÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
        sendContentToServer(studyId, isAnnouncementPart, themePart, titlePart, contentPart, imageParts)
    }

    private fun getFileFromUri(uri: Uri): File {
        val inputStream = requireContext().contentResolver.openInputStream(uri)
        val fileName = "image_${UUID.randomUUID()}.png" // üî• ÌååÏùºÎ™ÖÏùÑ Í≥†Ïú†ÌïòÍ≤å ÏÉùÏÑ±
        val file = File(requireContext().cacheDir, fileName)
        val outputStream = FileOutputStream(file)

        inputStream?.use { input ->
            outputStream.use { output ->
                input.copyTo(output)
            }
        }

        return file
    }


    private fun sendContentToServer(
        studyId: Int,
        isAnnouncementPart: RequestBody,
        themePart: RequestBody,
        titlePart: RequestBody,
        contentPart: RequestBody,
        imageParts: List<MultipartBody.Part>
    ) {
        val service = RetrofitInstance.retrofit.create(CommunityAPIService::class.java)
        service.postStudyPost(
            studyId,
            isAnnouncementPart,
            themePart,
            titlePart,
            contentPart,
            imageParts
        ).enqueue(object : Callback<StudyPostResponse> {
            override fun onResponse(call: Call<StudyPostResponse>, response: Response<StudyPostResponse>) {
                if (response.isSuccessful && response.body()?.isSuccess == "true") {
                    val writeContentResponseBody = response.body()!!.result
                    dismiss()
                    val intent = Intent(requireContext(), MyStudyPostContentActivity::class.java)
                    intent.putExtra("myStudyId", currentStudyId.toString())
                    intent.putExtra("myStudyPostId", writeContentResponseBody.postId.toString())
                    startActivity(intent)

                } else {
                    Log.e("API_ERROR", "Error code: ${response.code()}, Message: ${response.errorBody()?.string()}")
                    Toast.makeText(requireContext(), "Í≤åÏãúÍ∏Ä Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<StudyPostResponse>, t: Throwable) {
                Log.e("API ERROR", "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò : ${t.message}", t)
                Toast.makeText(requireContext(), "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            }
        })
    }


    private fun showLog(message: String?) {
        Toast.makeText(requireContext(), "WriteContentFragment: $message", Toast.LENGTH_SHORT).show()
    }


    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
        val selectedCategory = parent?.getItemAtPosition(position).toString()

        selectedTheme = when(selectedCategory) {
            "Í∞ÄÏûÖÏù∏ÏÇ¨" -> "WELCOME"
            "Ï†ïÎ≥¥Í≥µÏú†" -> "INFO_SHARING"
            "Ïä§ÌÑ∞ÎîîÌõÑÍ∏∞" -> "STUDY_REVIEW"
            "ÏûêÏú†" -> "FREE_TALK"
            "Q&A" -> "QNA"
            else -> "WELCOME"
        }
    }

    override fun onNothingSelected(parent: AdapterView<*>?) {
        selectedTheme = "WELCOME"
    }

}