package com.spot.android.ui.study

import android.app.Activity
import android.content.Intent
import android.graphics.PorterDuff
import android.net.Uri
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.spot.android.R
import com.spot.android.RetrofitInstance
import com.spot.android.databinding.FragmentMystudyWriteContentBinding
import com.spot.android.ui.community.CommunityAPIService
import com.spot.android.ui.community.StudyPostContentInfo
import com.spot.android.ui.community.StudyPostContentResponse
import com.spot.android.ui.community.StudyPostResponse
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.asRequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.io.File
import java.io.FileOutputStream
import java.util.UUID

class MyStudyEditContentFragment : BottomSheetDialogFragment(), AdapterView.OnItemSelectedListener {

    lateinit var binding: FragmentMystudyWriteContentBinding
    private var postId : Int = -1
    private var studyId : Int = -1
    private lateinit var imageAdapter: WriteContentImageRVadapter
    private var currentAnnouncement : Boolean = false
    private lateinit var getImageLauncher: ActivityResultLauncher<Intent>
    private val imageList = mutableListOf<Any>()

    private var selectedTheme: String = ""

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentMystudyWriteContentBinding.inflate(inflater, container, false)
        isCancelable = false // Ïô∏Î∂Ä ÌÅ¥Î¶≠ÏúºÎ°ú Îã´ÌûàÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï

        arguments?.let {
            val postId = it.getInt("MyStudyPostId",-1)
            val studyId = it.getInt("MyStudyId",-1)

            this.postId = postId
            this.studyId = studyId
        }

        ArrayAdapter.createFromResource(
            requireContext(),
            R.array.thema_list,
            R.layout.write_spinner_item
        ).also { adapter ->
            adapter.setDropDownViewResource(R.layout.write_spinner_dropdown_item)
            binding.mystudyCategorySpinner.adapter = adapter
        }

            getStudyPostContent()

        binding.writeContentTitleTv.text = "Í∏ÄÏàòÏ†ï"

        isCancelable = false // Ïô∏Î∂Ä ÌÅ¥Î¶≠ÏúºÎ°ú Îã´ÌûàÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï

        initTextWatchers()

        binding.mystudyCategorySpinner.onItemSelectedListener = this

        binding.writeContentFinishBtn.setOnClickListener{
            submitContent()
        }

        binding.checkIc.setOnClickListener{
            if(currentAnnouncement) {
                binding.checkIc.setColorFilter(
                    ContextCompat.getColor(requireContext(), R.color.gray),
                    PorterDuff.Mode.SRC_IN
                )
                currentAnnouncement = false
//                Log.d("MyStudyWriteContentFragment", isAnnouncement.toString())

                binding.themeTv.visibility = View.VISIBLE
                binding.mystudyCategorySpinner.visibility = View.VISIBLE

            } else {
                binding.checkIc.setColorFilter(
                    ContextCompat.getColor(requireContext(), R.color.b500),
                    PorterDuff.Mode.SRC_IN
                )
                currentAnnouncement = true
//                Log.d("MyStudyWriteContentFragment", isAnnouncement.toString())

                binding.themeTv.visibility = View.GONE
                binding.mystudyCategorySpinner.visibility = View.GONE
            }
        }

        binding.addImageIv.setOnClickListener{
            getImageFromAlbum()
//            Log.d("imageFormat", "$profileImageURI")
        }

        binding.writeContentPrevIv.setOnClickListener{
            dismiss()
        }

        // Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÉàÎ°úÏö¥ Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù Ï≤òÎ¶¨
        getImageLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val data = result.data

                // üîÅ Ïù¥Ï†Ñ Ïù¥ÎØ∏ÏßÄ Î™®Îëê Ï†úÍ±∞
                imageList.clear()
                if (data?.data != null) {
                    // ‚úÖ Ìïú Ïû• ÏÑ†ÌÉùÎêú Í≤ΩÏö∞
                    val uri = data.data!!
                    imageList.add(uri)
                }

                imageAdapter.notifyDataSetChanged() // RecyclerView Í∞±Ïã†
            }
        }

        return binding.root
    }

    override fun onDestroyView() {
        super.onDestroyView()
        (activity as? MyStudyPostContentActivity)?.fetchContentInfo() // Fragment Îã´ÌûàÎ©¥ ÏÉàÎ°úÍ≥†Ïπ®
    }

    private fun getStudyPostContent() {
        val service = RetrofitInstance.retrofit.create(CommunityAPIService::class.java)
        service.getStudyPostContent(studyId, postId,true)
            .enqueue(object : Callback<StudyPostContentResponse> {
                override fun onResponse(
                    call: Call<StudyPostContentResponse>,
                    response: Response<StudyPostContentResponse>
                ) {
                    if (response.isSuccessful) {
                        val contentResponse = response.body()
                        if (contentResponse?.isSuccess == "true") {
                            val contentInfo = contentResponse.result
                            currentAnnouncement = contentInfo.isAnnouncement

                            initContentInfo(contentInfo)

                        } else {
                            showError(contentResponse?.message)
                        }
                    } else {
//                        showError(response.code().toString())
                        val errorBody = response.errorBody()?.string()
                        Log.e("API_ERROR", "Error 400: ${response.code()}, Message: $errorBody")

                        showError("ÏÑúÎ≤Ñ Ïò§Î•ò Î∞úÏÉù: $errorBody")
                    }

                }

                override fun onFailure(call: Call<StudyPostContentResponse>, t: Throwable) {
                    Log.e("CommunityContentActivity", "Failure: ${t.message}", t)
                }
            })
    }

    private fun showError(message: String?) {
        Toast.makeText(requireContext(), "Error: $message", Toast.LENGTH_SHORT).show()
    }

    private fun initContentInfo(contentInfo: StudyPostContentInfo) {
        binding.writeContentTitleEt.setText(contentInfo.title)
        binding.writeContentContentEt.setText(contentInfo.content)

        // ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò® Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏Î•º Uri Î¶¨Ïä§Ìä∏Î°ú Î≥ÄÌôò
        val serverImageUrls = contentInfo.studyPostImages.map { it.imageUrl }

        // ÏÑúÎ≤Ñ Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏ÏôÄ Í∏∞Ï°¥Ïùò Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÑ†ÌÉùÌïú Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏ ÌÜµÌï©
        imageList.clear()
        imageList.addAll(serverImageUrls)

        // RecyclerView Ïñ¥ÎåëÌÑ∞ ÏÑ§Ï†ï
        imageAdapter = WriteContentImageRVadapter(imageList)
        binding.addedImagesRv.apply {
            adapter = imageAdapter
            layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
        }

        imageAdapter.notifyDataSetChanged() // RecyclerView Í∞±Ïã†

        if (!currentAnnouncement) {
            binding.themeTv.visibility = View.VISIBLE
            binding.mystudyCategorySpinner.visibility = View.VISIBLE
            binding.checkIc.setColorFilter(
                ContextCompat.getColor(requireContext(), R.color.gray),
                PorterDuff.Mode.SRC_IN
            )

        } else {
            binding.themeTv.visibility = View.GONE
            binding.mystudyCategorySpinner.visibility = View.GONE
            binding.checkIc.setColorFilter(
                ContextCompat.getColor(requireContext(), R.color.b500),
                PorterDuff.Mode.SRC_IN
            )
        }

        val position = getCategoryPosition(contentInfo.theme)
        if (position != -1) {
            binding.mystudyCategorySpinner.setSelection(position)
        }
    }


    // Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò ÏúÑÏπòÎ•º Î∞òÌôòÌïòÎäî Ìï®Ïàò
    private fun getCategoryPosition(theme: String): Int {
        val categories = resources.getStringArray(R.array.thema_list)
        return categories.indexOfFirst { it == getCategoryDisplayName(theme) }
    }

    // ÏÑúÎ≤ÑÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Ïπ¥ÌÖåÍ≥†Î¶¨ Í∞íÏùÑ ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥¥Ïó¨Ï§Ñ ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
    private fun getCategoryDisplayName(category: String): String {
        return when (category) {
            "WELCOME" -> "Í∞ÄÏûÖÏù∏ÏÇ¨"
            "INFO_SHARING" -> "Ï†ïÎ≥¥Í≥µÏú†"
            "STUDY_REVIEW" -> "Ïä§ÌÑ∞ÎîîÌõÑÍ∏∞"
            "FREE_TALK" -> "ÏûêÏú†"
            "QNA" -> "Q&A"
            else -> "WELCOME"
        }
    }

    private fun initTextWatchers() {
        val textWatcher = object : TextWatcher {
            override fun afterTextChanged(s: Editable?) {
                checkFieldsForEmptyValues()
            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
        }

        binding.writeContentTitleEt.addTextChangedListener(textWatcher)
        binding.writeContentContentEt.addTextChangedListener(textWatcher)
    }

    private fun checkFieldsForEmptyValues() {
        val title = binding.writeContentTitleEt.text.toString().trim()
        val content = binding.writeContentContentEt.text.toString().trim()

        binding.writeContentFinishBtn.isEnabled = title.isNotEmpty() && content.isNotEmpty()

    }

    // Í∞§Îü¨Î¶¨ Ïó¥Í∏∞ (Ïó¨Îü¨ Í∞ú ÏÑ†ÌÉù Í∞ÄÎä•)
    private fun getImageFromAlbum() {
        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {
            type = "image/*"
//            putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true) // üî• Ïó¨Îü¨ Í∞ú ÏÑ†ÌÉù Í∞ÄÎä•ÌïòÎèÑÎ°ù ÏÑ§Ï†ï
        }
        getImageLauncher.launch(intent)
    }


    private fun submitContent() {
        val title = binding.writeContentTitleEt.text.toString().trim()
        val content = binding.writeContentContentEt.text.toString().trim()

        lifecycleScope.launch {
            var imagePart: MultipartBody.Part? = null
            var existingImage: RequestBody? = null

            if (imageList.isNotEmpty()) {
                val item = imageList[0] // Ï≤´ Î≤àÏß∏ ÌïòÎÇòÎßå ÏÇ¨Ïö©

                when (item) {
                    is Uri -> {
                        val file = getFileFromUri(item)
                        val requestFile = file.asRequestBody("image/*".toMediaTypeOrNull())
                        imagePart = MultipartBody.Part.createFormData("image", file.name, requestFile)
                        existingImage = "".toRequestBody("text/plain".toMediaTypeOrNull())

                    }

                    is String -> {
                        existingImage = item.toRequestBody("text/plain".toMediaTypeOrNull())
                    }
                }
            }

            val isAnnouncementPart = currentAnnouncement.toString().toRequestBody("text/plain".toMediaTypeOrNull())
            val themePart = selectedTheme.toRequestBody("text/plain".toMediaTypeOrNull())
            val titlePart = title.toRequestBody("text/plain".toMediaTypeOrNull())
            val contentPart = content.toRequestBody("text/plain".toMediaTypeOrNull())

            sendContentToServer(
                isAnnouncementPart,
                themePart,
                titlePart,
                contentPart,
                imagePart,
                existingImage
            )
        }
    }

    private fun getFileFromUri(uri: Uri): File {
        val inputStream = requireContext().contentResolver.openInputStream(uri)
        val fileName = "image_${UUID.randomUUID()}.png" // üî• ÌååÏùºÎ™ÖÏùÑ Í≥†Ïú†ÌïòÍ≤å ÏÉùÏÑ±
        val file = File(requireContext().cacheDir, fileName)
        val outputStream = FileOutputStream(file)

        inputStream?.use { input ->
            outputStream.use { output ->
                input.copyTo(output)
            }
        }

        return file
    }


    private fun sendContentToServer(
        isAnnouncementPart: RequestBody,
        themePart: RequestBody,
        titlePart: RequestBody,
        contentPart: RequestBody,
        imagePart: MultipartBody.Part?,
        existingImage: RequestBody?
    ) {
        val service = RetrofitInstance.retrofit.create(CommunityAPIService::class.java)
        service.patchStudyPost(
            studyId,
            postId,
            isAnnouncementPart,
            themePart,
            titlePart,
            contentPart,
            imagePart,
            existingImage
        ).enqueue(object : Callback<StudyPostResponse> {
            override fun onResponse(call: Call<StudyPostResponse>, response: Response<StudyPostResponse>) {
                if (response.isSuccessful && response.body()?.isSuccess == "true") {
                    val writeContentResponseBody = response.body()!!.result
//                    showLog(writeContentResponseBody.toString())
                    dismiss()
                } else {
                    Log.e("API_ERROR", "Error code: ${response.code()}, Message: ${response.errorBody()?.string()}")
                    Toast.makeText(requireContext(), "Í≤åÏãúÍ∏Ä Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<StudyPostResponse>, t: Throwable) {
                Log.e("API ERROR", "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò : ${t.message}", t)
                Toast.makeText(requireContext(), "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            }
        })
    }

    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
        val selectedCategory = parent?.getItemAtPosition(position).toString()

        selectedTheme = when(selectedCategory) {
            "Í∞ÄÏûÖÏù∏ÏÇ¨" -> "WELCOME"
            "Ï†ïÎ≥¥Í≥µÏú†" -> "INFO_SHARING"
            "Ïä§ÌÑ∞ÎîîÌõÑÍ∏∞" -> "STUDY_REVIEW"
            "ÏûêÏú†" -> "FREE_TALK"
            "Q&A" -> "QNA"
            else -> "WELCOME"
        }
    }

    override fun onNothingSelected(parent: AdapterView<*>?) {
        selectedTheme = "WELCOME"
    }

}